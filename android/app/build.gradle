plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

// remove this when flutter fix following issue:
// https://github.com/flutter/flutter/issues/139289
def dartDefines = [:];
if (project.hasProperty('dart-defines')) {
    dartDefines = project.property('dart-defines')
        .split(',')
        .collectEntries { entry ->
            def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
            [(pair.first()): pair.last()]
        }
}

def loadKeystoreProperties(keystoreFilePath) {
    def keystoreProperties = new Properties()
    def keystorePropertiesFile = rootProject.file(keystoreFilePath)
    if (keystorePropertiesFile.exists()) keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    return keystoreProperties
}

android {
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName

        // --dart-define-from-file=configs/example.json
        resValue "string", "app_name", dartDefines.containsKey('APP_NAME') ? dartDefines.APP_NAME : 'Spooky'
    }

    signingConfigs {
        spookyRelease {
            def keystoreProperties = loadKeystoreProperties('./keys/spooky/spooky_key.properties')
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }

        storypadRelease {
            def keystoreProperties = loadKeystoreProperties('./keys/storypad/storypad_key.properties')
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }

        communityRelease {
            def keystoreProperties = loadKeystoreProperties('./keys/community/community_key.properties')
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }

        spookyDebug {
            storeFile rootProject.file('./keys/spooky/spooky_debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        storypadDebug {
            storeFile rootProject.file('./keys/storypad/storypad_debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        communityDebug {
            storeFile rootProject.file('./keys/community/community_debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    flavorDimensions "app"
    productFlavors {
        spooky {
            dimension "app"
            applicationId "com.juniorise.spooky"
            namespace "com.juniorise.spooky"
            signingConfig signingConfigs.spookyRelease
        }

        storypad {
            dimension "app"
            applicationId "com.tc.writestory"
            namespace "com.tc.writestory"
            signingConfig signingConfigs.storypadRelease
        }

        community {
            dimension "app"
            applicationId "com.juniorise.spooky.community"
            namespace "com.juniorise.spooky"
            signingConfig signingConfigs.communityRelease
        }
    }

    buildTypes {
        debug {
          signingConfig signingConfigs.spookyDebug
          // signingConfig signingConfigs.storypadDebug
          // signingConfig signingConfigs.communityDebug
        }
    }
}

flutter {
    source = "../.."
}
